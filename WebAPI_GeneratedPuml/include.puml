@startuml
class Program {
    + {static} Main(args:string[]) : void
}
class AuthenticationHelper {
    + AuthenticationHelper(repo:PrintingSystemContext)
    + <<async>> cardIDExists(cardID:Guid) : Task<bool>
    + <<async>> usernameExists(username:string) : Task<bool>
    + <<async>> isCardActive(cardID:Guid) : Task<bool>
    + <<async>> isUserActive(cardID:Guid) : Task<bool>
    - <<async>> isUserActive(username:string) : Task<bool>
    + <<async>> verifyPasswordWithUsername(username:string, password:string) : Task<bool>
    + <<async>> GetUsers() : Task<IEnumerable<User>>
    + <<async>> getUIDByCardID(cardID:Guid) : Task<Guid>
    + <<async>> getUIDByUsername(username:string) : Task<Guid>
    + <<async>> isUserStaff(userId:Guid) : Task<bool>
    + <<async>> authenticateByCard(cardId:Guid) : Task<(string, Guid?)>
    + <<async>> authenticateByUsername(username:string, password:string) : Task<(string, Guid?)>
    + <<async>> checkUsername(username:string) : Task <bool>
    + <<async>> authenticateByUsernameWithStaffCheck(username:string, password:string) : Task<(string, Guid?, bool, string)>
}
IAuthentificationHelper <|-- AuthenticationHelper
AuthenticationHelper --> "_repo" PrintingSystemContext
class BalanceHelper {
    + BalanceHelper(repo:PrintingSystemContext, authHelper:IAuthentificationHelper)
    + additionQuotaCHF(quotaCHF:decimal, actualQuotaCHF:decimal) : decimal
    + convertQuotaCHFToCopyQuota(quotaCHF:decimal) : int
    + <<async>> getQuotaCHFByUID(userID:Guid) : Task<decimal>
    + <<async>> updateCopyQuotaByUID(userID:Guid, copyQuota:int) : Task<int>
    + <<async>> updateQuotaCHFByUID(userID:Guid, quotaCHF:decimal) : Task<decimal>
    + <<async>> creditUIDWithQuotaCHF(userID:Guid, quotaCHF:decimal) : Task<(decimal, int, bool)>
    + <<async>> creditUsernameWithQuotaCHF(username:string, quotaCHF:decimal) : Task<(decimal, bool)>
    + <<async>> creditGroupWithQuotaCHF(group:string, quotaCHF:decimal) : Task<(List<User>, decimal, bool)>
}
IBalanceHelper <|-- BalanceHelper
BalanceHelper --> "_repo" PrintingSystemContext
BalanceHelper --> "_authHelper" IAuthentificationHelper
interface IAuthentificationHelper {
    authenticateByCard(cardId:Guid) : Task<(string, Guid?)>
    authenticateByUsername(username:string, password:string) : Task<(string, Guid?)>
    checkUsername(username:string) : Task<bool>
    authenticateByUsernameWithStaffCheck(username:string, password:string) : Task<(string message, Guid? uid, bool isStaff, string group)>
    cardIDExists(cardID:Guid) : Task<bool>
    isCardActive(cardID:Guid) : Task<bool>
    getUIDByCardID(cardID:Guid) : Task<Guid>
    getUIDByUsername(username:string) : Task<Guid>
    usernameExists(username:string) : Task<bool>
    verifyPasswordWithUsername(username:string, password:string) : Task<bool>
    isUserStaff(userId:Guid) : Task<bool>
}
interface IBalanceHelper {
    creditUIDWithQuotaCHF(userID:Guid, quotaCHF:decimal) : Task<(decimal, int, bool)>
    creditUsernameWithQuotaCHF(username:string, quotaCHF:decimal) : Task<(decimal, bool)>
    creditGroupWithQuotaCHF(group:string, quotaCHF:decimal) : Task<(List<User>, decimal, bool)>
    getQuotaCHFByUID(userID:Guid) : Task<decimal>
    additionQuotaCHF(quotaCHF:decimal, actualQuotaCHF:decimal) : decimal
    updateQuotaCHFByUID(userID:Guid, quotaCHF:decimal) : Task<decimal>
    convertQuotaCHFToCopyQuota(quotaCHF:decimal) : int
    updateCopyQuotaByUID(userID:Guid, copyQuota:int) : Task<int>
}
class AuthenticationController {
    + AuthenticationController(authentificationHelper:IAuthentificationHelper)
    + <<async>> checkUsername(username:string) : Task<ActionResult<Guid>>
    + <<async>> AuthenticateByCard(request:CardAuthenticationRequest) : Task<ActionResult>
    + <<async>> AuthenticateByUsername(request:AuthenticationRequest) : Task<ActionResult>
}
class AuthenticationRequest {
    + Username : string <<get>> <<set>>
    + Password : string <<get>> <<set>>
}
class CardAuthenticationRequest {
}
ControllerBase <|-- AuthenticationController
AuthenticationController --> "_authentificationHelper" IAuthentificationHelper
AuthenticationController +-- CardAuthenticationRequest
CardAuthenticationRequest --> "cardID" Guid
class BalanceController {
    + BalanceController(balanceHelper:IBalanceHelper)
    + <<async>> CreditUIDWithQuotaCHF(request:CreditUIDRequest) : Task<ActionResult<(decimal, int, bool)>>
    + <<async>> CreditUsernameWithQuotaCHF(request:CreditUsernameRequest) : Task<ActionResult<(decimal, bool)>>
    + <<async>> CreditGroupWithQuotaCHF(request:CreditUsernameRequest) : Task<ActionResult<(List<User>, decimal, bool)>>
}
class CreditUIDRequest {
    + QuotaCHF : decimal <<get>> <<set>>
}
class CreditUsernameRequest {
    + Username : string? <<get>> <<set>>
    + QuotaCHF : decimal <<get>> <<set>>
    + Group : string? <<get>> <<set>>
}
class CreditGroupRequest {
    + Group : string <<get>> <<set>>
    + QuotaCHF : decimal <<get>> <<set>>
}
ControllerBase <|-- BalanceController
BalanceController --> "_balanceHelper" IBalanceHelper
BalanceController +-- CreditUIDRequest
CreditUIDRequest --> "UserID" Guid
BalanceController +-- CreditUsernameRequest
BalanceController +-- CreditGroupRequest
@enduml
