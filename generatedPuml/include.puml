@startuml
class DiagramGenerator {
    + DiagramGenerator()
    + <<async>> GenerateDiagramAsync(plantUmlText:string, outputPath:string) : Task
}
DiagramGenerator --> "_renderer" IPlantUmlRenderer
class Program {
    {static} - Main(args:string[]) : void
}
class DatabaseInitializator <<static>> {
    + {static} SeedData(context:PrintingSystemContext) : void
    - {static} SeedProducts(context:PrintingSystemContext) : void
    - {static} SeedUsers(context:PrintingSystemContext) : void
    - {static} SeedTransactions(context:PrintingSystemContext) : void
    - {static} GenerateUniqueUsername(context:PrintingSystemContext, firstName:string, lastName:string) : string
}
class PrintingSystemContext {
    + PrintingSystemContext()
    + PrintingSystemContext(options:DbContextOptions<PrintingSystemContext>)
    # <<override>> OnConfiguring(optionsBuilder:DbContextOptionsBuilder) : void
    # <<override>> OnModelCreating(modelBuilder:ModelBuilder) : void
}
class "DbSet`1"<T> {
}
DbContext <|-- PrintingSystemContext
PrintingSystemContext --> "Users<User>" "DbSet`1"
PrintingSystemContext --> "Products<Product>" "DbSet`1"
PrintingSystemContext --> "Cards<Card>" "DbSet`1"
PrintingSystemContext --> "Transactions<Transaction>" "DbSet`1"
class Program {
    + {static} Main(args:string[]) : void
}
class Program {
    + {static} Main(args:string[]) : void
}
class Program {
    + {static} Main(args:string[]) : void
}
class Program {
    + {static} Main(args:string[]) : void
}
class Card {
    - Card()
    + Card(userid:Guid)
    + IsActive : bool <<get>> <<set>>
}
Card --> "CardID" Guid
Card --> "UserID" Guid
Card --> "User" User
Card --> "CreationDate" DateTime
Card --> "ExpirationDate" DateTime
class Product {
    + Product()
    + Product(name:string, description:string, pricePerUnit:decimal, printQuotaCost:int, color:bool, paperSize:string, paperType:string)
    + Name : string <<get>> <<set>>
    + Description : string <<get>> <<set>>
    + PricePerUnit : decimal <<get>> <<set>>
    + PrintQuotaCost : decimal <<get>> <<set>>
    + Color : bool <<get>> <<set>>
    + PaperSize : string <<get>> <<set>>
    + PaperType : string <<get>> <<set>>
}
Product --> "ProductID" Guid
class Transaction {
    - Transaction()
    + Transaction(userId:Guid, pageCount:int, product:Product)
    + PageCount : int <<get>> <<set>>
    + TotalCopyQuotaInTransaction : int <<get>> <<set>>
    + TotalCHFInTransaction : decimal <<get>> <<set>>
    + TotalQuotaCHFInTransaction : decimal <<get>> <<set>>
    + ApplyToUserBalance() : void
}
Transaction --> "TransactionID" Guid
Transaction --> "Date" DateTime
Transaction --> "UserID" Guid
Transaction --> "User" User
Transaction --> "ProductID" Guid
Transaction --> "Product" Product
class User {
    # User()
    + User(firstName:string, lastName:string, password:string, username:string, group:string)
    + Username : string <<get>> <<set>>
    + FirstName : string <<get>> <<set>>
    + LastName : string <<get>> <<set>>
    + Password : string <<get>> <<set>>
    + Group : string <<get>> <<set>>
    + IsActive : bool <<get>> <<set>>
    + CopyQuota : int <<get>> <<set>>
    + CHF : decimal <<get>> <<set>>
    + QuotaCHF : decimal <<get>> <<set>>
}
class "ICollection`1"<T> {
}
User --> "UserID" Guid
User --> "CreationDate" DateTime
User --> "Card" Card
User --> "Transactions<Transaction>" "ICollection`1"
class PrintsystemAccessController {
    + PrintsystemAccessController(printServices:IPrintsystemServices)
    + <<async>> Index() : Task<IActionResult>
    + <<async>> AuthenticateByUsername() : Task<IActionResult>
    + <<async>> AuthenticateByUsername(userAuth:AuthentificationM) : Task<IActionResult>
    + <<async>> creditUsernameWithQuotaCHF() : Task<IActionResult>
    + <<async>> creditUsernameWithQuotaCHF(user:UserM) : Task<IActionResult>
}
Controller <|-- PrintsystemAccessController
PrintsystemAccessController --> "_printServices" IPrintsystemServices
class AuthentificationM {
    + Username : string <<get>> <<set>>
    + Password : string <<get>> <<set>>
}
AuthentificationM --> "UID" Guid
class CardM {
}
CardM --> "CardId" Guid
CardM --> "UserId" Guid
class ErrorViewModel {
    + RequestId : string? <<get>> <<set>>
    + ShowRequestId : bool <<get>>
}
class UserM {
    + Username : string <<get>> <<set>>
    + Group : string <<get>> <<set>>
    + CopyQuota : int <<get>> <<set>>
    + QuotaCHF : decimal <<get>> <<set>>
}
UserM --> "UserID" Guid
interface IPrintsystemServices {
    AuthenticateByUsername(userAuth:AuthentificationM) : Task<AuthentificationM>
    creditUsernameWithQuotaCHF(user:UserM) : Task<UserM>
}
class PrintsystemServices {
    - <<readonly>> _baseUrl : string = "https://localhost:7101"
    + PrintsystemServices(client:HttpClient)
    + <<async>> AuthenticateByUsername(userAuth:AuthentificationM) : Task<AuthentificationM>
    + <<async>> creditUsernameWithQuotaCHF(user:UserM) : Task<UserM>
}
IPrintsystemServices <|-- PrintsystemServices
PrintsystemServices --> "_client" HttpClient
class HomeController {
    + HomeController(logger:ILogger<HomeController>)
    + Index() : IActionResult
    + Privacy() : IActionResult
    + Error() : IActionResult
}
class "ILogger`1"<T> {
}
Controller <|-- HomeController
HomeController --> "_logger<HomeController>" "ILogger`1"
class ErrorViewModel {
    + RequestId : string? <<get>> <<set>>
    + ShowRequestId : bool <<get>>
}
class AuthenticationAccessController {
    + AuthenticationAccessController(authService:IAuthenticationService, balanceService:IBalanceService)
    + Card() : IActionResult
    + <<async>> Card(card:CardM) : Task<IActionResult>
    + AddCredit() : IActionResult
    + <<async>> AddCredit(model:BalanceM) : Task<IActionResult>
    + Summary() : IActionResult
}
Controller <|-- AuthenticationAccessController
AuthenticationAccessController --> "_authService" IAuthenticationService
AuthenticationAccessController --> "_balanceService" IBalanceService
class BalanceController {
    + BalanceController(balanceService:IBalanceService)
    + CreditUser(userId:Guid) : IActionResult
    + <<async>> CreditUser(model:BalanceM) : Task<IActionResult>
    + <<async>> UserBalance(userId:Guid) : Task<IActionResult>
}
Controller <|-- BalanceController
BalanceController --> "_balanceService" IBalanceService
class AuthenticationM {
    + Message : string <<get>> <<set>>
    + IsSuccessful : bool <<get>>
}
AuthenticationM --> "UID" Guid
class BalanceM {
    + Amount : decimal <<get>> <<set>>
}
BalanceM --> "UserId" Guid
class CardM {
}
CardM --> "CardId" Guid
CardM --> "UserId" Guid
class ErrorViewModel {
    + RequestId : string? <<get>> <<set>>
    + ShowRequestId : bool <<get>>
}
class UserM {
    + Username : string? <<get>> <<set>>
    + FirstName : string? <<get>> <<set>>
    + LastName : string? <<get>> <<set>>
    + QuotaCHF : decimal <<get>> <<set>>
    + CopyQuota : int <<get>> <<set>>
}
UserM --> "UID" Guid
class AuthenticationService {
    - <<readonly>> _baseUrl : string = "https://localhost:7101"
    + AuthenticationService(client:HttpClient)
    + <<async>> AuthenticateByCardAsync(cardId:Guid) : Task<AuthenticationM>
}
IAuthenticationService <|-- AuthenticationService
AuthenticationService --> "_client" HttpClient
class BalanceService {
    - <<readonly>> _baseUrl : string = "https://localhost:7101"
    + BalanceService(client:HttpClient)
    + <<async>> CreditUserWithQuotaCHFAsync(userId:Guid, quotaCHF:decimal) : Task<UserM>
    + <<async>> GetUserBalanceAsync(userId:Guid) : Task<UserM>
}
IBalanceService <|-- BalanceService
BalanceService --> "_client" HttpClient
interface IAuthenticationService {
    AuthenticateByCardAsync(cardId:Guid) : Task<AuthenticationM>
}
interface IBalanceService {
    CreditUserWithQuotaCHFAsync(userId:Guid, quotaCHF:decimal) : Task<UserM>
    GetUserBalanceAsync(userId:Guid) : Task<UserM>
}
class AuthenticationHelper {
    + AuthenticationHelper(repo:PrintingSystemContext)
    + <<async>> cardIDExists(cardID:Guid) : Task<bool>
    + <<async>> usernameExists(username:string) : Task<bool>
    + <<async>> isCardActive(cardID:Guid) : Task<bool>
    + <<async>> isUserActive(cardID:Guid) : Task<bool>
    - <<async>> isUserActive(username:string) : Task<bool>
    + <<async>> verifyPasswordWithUsername(username:string, password:string) : Task<bool>
    + <<async>> GetUsers() : Task<IEnumerable<User>>
    + <<async>> getUIDByCardID(cardID:Guid) : Task<Guid>
    + <<async>> getUIDByUsername(username:string) : Task<Guid>
    + <<async>> authenticateByCard(cardId:Guid) : Task<(string, Guid?)>
    + <<async>> authenticateByUsername(username:string, password:string) : Task<(string, Guid?)>
    + <<async>> checkUsername(username:string) : Task <bool>
}
IAuthentificationHelper <|-- AuthenticationHelper
AuthenticationHelper --> "_repo" PrintingSystemContext
class BalanceHelper {
    + BalanceHelper(repo:PrintingSystemContext, authHelper:IAuthentificationHelper)
    + additionQuotaCHF(quotaCHF:decimal, actualQuotaCHF:decimal) : decimal
    + convertQuotaCHFToCopyQuota(quotaCHF:decimal) : int
    + <<async>> getQuotaCHFByUID(userID:Guid) : Task<decimal>
    + <<async>> updateCopyQuotaByUID(userID:Guid, copyQuota:int) : Task<int>
    + <<async>> updateQuotaCHFByUID(userID:Guid, quotaCHF:decimal) : Task<decimal>
    + <<async>> creditUIDWithQuotaCHF(userID:Guid, quotaCHF:decimal) : Task<(decimal , int, bool )>
    + <<async>> creditUsernameWithQuotaCHF(username:string, quotaCHF:decimal) : Task<(decimal ,bool )>
}
IBalanceHelper <|-- BalanceHelper
BalanceHelper --> "_repo" PrintingSystemContext
BalanceHelper --> "_authHelper" IAuthentificationHelper
interface IAuthentificationHelper {
    authenticateByCard(cardId:Guid) : Task<(string, Guid?)>
    authenticateByUsername(username:string, password:string) : Task<(string, Guid?)>
    checkUsername(username:string) : Task<bool>
    cardIDExists(cardID:Guid) : Task<bool>
    isCardActive(cardID:Guid) : Task<bool>
    getUIDByCardID(cardID:Guid) : Task<Guid>
    getUIDByUsername(username:string) : Task<Guid>
    usernameExists(username:string) : Task<bool>
    verifyPasswordWithUsername(username:string, password:string) : Task<bool>
}
interface IBalanceHelper {
    creditUIDWithQuotaCHF(userID:Guid, quotaCHF:decimal) : Task<(decimal, int, bool)>
    creditUsernameWithQuotaCHF(username:string, quotaCHF:decimal) : Task<(decimal, bool)>
    getQuotaCHFByUID(userID:Guid) : Task<decimal>
    additionQuotaCHF(quotaCHF:decimal, actualQuotaCHF:decimal) : decimal
    updateQuotaCHFByUID(userID:Guid, quotaCHF:decimal) : Task<decimal>
    convertQuotaCHFToCopyQuota(quotaCHF:decimal) : int
    updateCopyQuotaByUID(userID:Guid, copyQuota:int) : Task<int>
}
class AuthenticationController {
    + AuthenticationController(authentificationHelper:IAuthentificationHelper)
    + <<async>> checkUsername(username:string) : Task<ActionResult<Guid>>
    + <<async>> AuthenticateByCard(cardId:Guid) : Task<ActionResult>
    + <<async>> AuthenticateByUsername(request:AuthenticationRequest) : Task<ActionResult>
}
class AuthenticationRequest {
    + Username : string <<get>> <<set>>
    + Password : string <<get>> <<set>>
}
ControllerBase <|-- AuthenticationController
AuthenticationController --> "_authentificationHelper" IAuthentificationHelper
class BalanceController {
    + BalanceController(balanceHelper:IBalanceHelper)
    + <<async>> CreditUIDWithQuotaCHF(userID:Guid, quotaCHF:decimal) : Task<ActionResult<(decimal, int, bool)>>
    + <<async>> CreditUsernameWithQuotaCHF(username:string, quotaCHF:decimal) : Task<ActionResult<(decimal, bool)>>
}
ControllerBase <|-- BalanceController
BalanceController --> "_balanceHelper" IBalanceHelper
@enduml
